// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: temperature.proto

package temperature

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 溫度監測數據
type TemperatureReading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // 裝置唯一識別碼
	Temperature   float32                `protobuf:"fixed32,2,opt,name=temperature,proto3" json:"temperature,omitempty"`         // 溫度值 (攝氏)
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`              // 時間戳 (Unix 秒)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemperatureReading) Reset() {
	*x = TemperatureReading{}
	mi := &file_temperature_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemperatureReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureReading) ProtoMessage() {}

func (x *TemperatureReading) ProtoReflect() protoreflect.Message {
	mi := &file_temperature_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureReading.ProtoReflect.Descriptor instead.
func (*TemperatureReading) Descriptor() ([]byte, []int) {
	return file_temperature_proto_rawDescGZIP(), []int{0}
}

func (x *TemperatureReading) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TemperatureReading) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TemperatureReading) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 確認訊息
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 確認訊息內容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_temperature_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_temperature_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_temperature_proto_rawDescGZIP(), []int{1}
}

func (x *Ack) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_temperature_proto protoreflect.FileDescriptor

const file_temperature_proto_rawDesc = "" +
	"\n" +
	"\x11temperature.proto\x12\vtemperature\"q\n" +
	"\x12TemperatureReading\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x12 \n" +
	"\vtemperature\x18\x02 \x01(\x02R\vtemperature\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage2^\n" +
	"\x12TemperatureMonitor\x12H\n" +
	"\x0fSendTemperature\x12\x1f.temperature.TemperatureReading\x1a\x10.temperature.Ack(\x010\x01B\x0fZ\r./temperatureb\x06proto3"

var (
	file_temperature_proto_rawDescOnce sync.Once
	file_temperature_proto_rawDescData []byte
)

func file_temperature_proto_rawDescGZIP() []byte {
	file_temperature_proto_rawDescOnce.Do(func() {
		file_temperature_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temperature_proto_rawDesc), len(file_temperature_proto_rawDesc)))
	})
	return file_temperature_proto_rawDescData
}

var file_temperature_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_temperature_proto_goTypes = []any{
	(*TemperatureReading)(nil), // 0: temperature.TemperatureReading
	(*Ack)(nil),                // 1: temperature.Ack
}
var file_temperature_proto_depIdxs = []int32{
	0, // 0: temperature.TemperatureMonitor.SendTemperature:input_type -> temperature.TemperatureReading
	1, // 1: temperature.TemperatureMonitor.SendTemperature:output_type -> temperature.Ack
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_temperature_proto_init() }
func file_temperature_proto_init() {
	if File_temperature_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temperature_proto_rawDesc), len(file_temperature_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_temperature_proto_goTypes,
		DependencyIndexes: file_temperature_proto_depIdxs,
		MessageInfos:      file_temperature_proto_msgTypes,
	}.Build()
	File_temperature_proto = out.File
	file_temperature_proto_goTypes = nil
	file_temperature_proto_depIdxs = nil
}
